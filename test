#include <stdio.h>
#include "cs1300bmp.h"
#include <iostream>
#include <fstream>
#include "Filter.h"

using namespace std;

#include "rdtsc.h"

//
// Forward declare the functions
//

inline int Filter::getDivisor(){return divisor;}
inline int Filter::getSize(){return dim;}
inline int Filter::get(int r, int c){return data[ r * dim + c ];}

Filter * readFilter(string filename);
double applyFilter(Filter *filter, cs1300bmp *input, cs1300bmp *output);

int
main(int argc, char **argv)
{

  if ( argc < 2) {
    fprintf(stderr,"Usage: %s filter inputfile1 inputfile2 .... \n", argv[0]);
  }

  //
  // Convert to C++ strings to simplify manipulation
  //
  string filtername = argv[1];

  //
  // remove any ".filter" in the filtername
  //
  string filterOutputName = filtername;
  string::size_type loc = filterOutputName.find(".filter");
  if (loc != string::npos) {
    //
    // Remove the ".filter" name, which should occur on all the provided filters
    //
    filterOutputName = filtername.substr(0, loc);
  }

  Filter *filter = readFilter(filtername);

  double sum = 0.0;
  int samples = 0;

  for (int inNum = 2; inNum < argc; inNum++) {
    string inputFilename = argv[inNum];
    string outputFilename = "filtered-" + filterOutputName + "-" + inputFilename;
    struct cs1300bmp *input = new struct cs1300bmp;
    struct cs1300bmp *output = new struct cs1300bmp;
    int ok = cs1300bmp_readfile( (char *) inputFilename.c_str(), input);

    if ( ok ) {
      double sample = applyFilter(filter, input, output);
      sum += sample;
      samples++;
      cs1300bmp_writefile((char *) outputFilename.c_str(), output);
    }
    delete input;
    delete output;
  }
  fprintf(stdout, "Average cycles per sample is %f\n", sum / samples);

}

struct Filter *
readFilter(string filename)
{
  ifstream input(filename.c_str());

  if ( ! input.bad() ) {
    int size = 0;
    input >> size;
    Filter *filter = new Filter(size);
    int div;
    input >> div;
    filter -> setDivisor(div);
    for (int i=0; i < size; i++) {
      for (int j=0; j < size; j++) {
	int value;
	input >> value;
	filter -> set(i,j,value);
      }
    }
    return filter;
  } else {
    cerr << "Bad input in readFilter:" << filename << endl;
    exit(-1);
  }
}


double
applyFilter(struct Filter *filter, cs1300bmp *input, cs1300bmp *output)
{

  long long cycStart, cycStop;

  cycStart = rdtscll();
  output -> width = input -> width;
  output -> height = input -> height;
  int inputWidth = input->width - 1;
  int inputHeight = input->height - 1;
  for(int col = 1; col < inputWidth; col = col + 1) {
    for(int row = 1; row < inputHeight; row = row + 1) { //remove for loop for planes
	int green = 0;
    int red = 0;
    int blue = 0;
    int j;
	for (j = 0; j < filter->getSize(); j++) {
      int i;
	  for (i = 0; i < filter->getSize(); i+=1) {	
         red += input->color[row + i - 1][col + j - 1][COLOR_RED] * filter->get(i, j);
	     green += input->color[row + i - 1][col + j - 1][COLOR_GREEN] * filter->get(i, j);
         blue += input->color[row + i - 1][col + j - 1][COLOR_BLUE] * filter->get(i, j);
	  }
	}
	
	red /= filter->getDivisor();
    green /= filter->getDivisor();
    blue  /= filter->getDivisor();

	//if (red < 0){
    //red = 0;
    //}
    //if (red > 255){
    //red = 255;
    //}
    //if (green < 0){
    //green = 0;
    //}
    //if (green > 255){
    //green = 255;
    //}
    //if (blue < 0){
    //blue = 0;
    //}
    //if (blue > 255){
    //blue = 255;
    //}
    red = red < 0 ? 0 : red > 255 ? 255 : red;
    green = green < 0 ? 0 : green > 255 ? 255 : green;
    blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
    output->color[row][col][COLOR_RED] = red;
    output->color[row][col][COLOR_GREEN] = green;
    output->color[row][col][COLOR_BLUE] = blue;
    }
  }

  cycStop = rdtscll();
  double diff = cycStop - cycStart;
  double diffPerPixel = diff / (output -> width * output -> height);
  fprintf(stderr, "Took %f cycles to process, or %f cycles per pixel\n",
	  diff, diff / (output -> width * output -> height));
  return diffPerPixel;
}
